name: '♻️ CD'

on:
  release:
    types:
      - created

env:
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

jobs:
  pipeline:
    name: Publish
    runs-on: windows-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x'

      - name: Extract Release Version
        id: get-version
        run: |
          $regex = '^(?<major>0|[1-9]\d*)\.(?<minor>0|[1-9]\d*)\.(?<patch>0|[1-9]\d*)(?:-(?<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?<buildmetadata>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'
          $version = "${{ github.event.release.tag_name }}"

          if ($version -match $regex) {
            $major = $matches['major']
            $minor = $matches['minor']
            $patch = $matches['patch']
            $prerelease = $matches['prerelease']
            $buildmetadata = $matches['buildmetadata']

            Write-Output "::set-output name=MAJOR::$major"
            Write-Output "::set-output name=MINOR::$minor"
            Write-Output "::set-output name=PATCH::$patch"
            Write-Output "::set-output name=PRERELEASE::$prerelease"
            Write-Output "::set-output name=BUILDMETADATA::$buildmetadata"
          } else {
            throw "Invalid Semantic Versioning format: $version"
          }

      - name: Build
        run: |
          dotnet build src/CloudFlare.Client.sln --configuration ${{ env.buildConfiguration }} `
            /p:MajorVersion=${{ steps.get-version.outputs.MAJOR }} `
            /p:MinorVersion=${{ steps.get-version.outputs.MINOR }} `
            /p:PatchVersion=${{ steps.get-version.outputs.PATCH }} `
            /p:PreReleaseLabel=${{ steps.get-version.outputs.PRERELEASE }} `
            /p:BuildMetadata=${{ steps.get-version.outputs.BUILDMETADATA }}

      - name: Run Tests
        run: dotnet test src/CloudFlare.Client.sln --logger "trx;logfilename=TestResults.trx" --no-build --configuration ${{ env.buildConfiguration }} --collect "XPlat Code Coverage;Format=opencover,cobertura"

      - name: Pack
        run: |
            dotnet pack src/CloudFlare.Client/CloudFlare.Client.csproj --no-build --configuration ${{ env.buildConfiguration }} .\CloudFlare.Client.sln `
            /p:MajorVersion=${{ steps.get-version.outputs.MAJOR }} `
            /p:MinorVersion=${{ steps.get-version.outputs.MINOR }} `
            /p:PatchVersion=${{ steps.get-version.outputs.PATCH }} `
            /p:PreReleaseLabel=${{ steps.get-version.outputs.PRERELEASE }} `
            /p:BuildMetadata=${{ steps.get-version.outputs.BUILDMETADATA }}

      - name: Publish NuGet packages
        run: |
          foreach($file in (Get-ChildItem "${{ github.workspace }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          }
